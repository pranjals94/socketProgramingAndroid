🌐 Goal: Discover all active IPs on local network
🛠️ Step-by-step Logic
Get your own local IP and subnet (e.g., 192.168.1.100/24)

Generate IPs in the subnet (e.g., 192.168.1.1 to 192.168.1.254)

Try to connect to a common port (e.g., port 80 or 22) to see if a device responds

Collect responsive IPs

🐍 Example in Python

import socket
import concurrent.futures

# Set your subnet
subnet = "192.168.1."

# Port to scan (common open port)
port = 80

def scan_ip(ip):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.2)
        sock.connect((ip, port))
        sock.close()
        return ip
    except:
        return None

# Scan IPs in the subnet
active_ips = []
with concurrent.futures.ThreadPoolExecutor() as executor:
    futures = [executor.submit(scan_ip, f"{subnet}{i}") for i in range(1, 255)]
    for future in concurrent.futures.as_completed(futures):
        ip = future.result()
        if ip:
            active_ips.append(ip)

print("Active devices:", active_ips)

📋 Output
Active devices: ['192.168.1.1', '192.168.1.101', '192.168.1.105']

🚧 Notes
Works only in LAN (not over Internet)

Needs you to know your subnet

May miss some devices if they block or don’t respond on the scanned port

Can be expanded using ICMP ping or ARP (need scapy or OS-level tools)