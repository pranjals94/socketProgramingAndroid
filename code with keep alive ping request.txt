package com.example.mqttapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.material3.Text
import androidx.compose.runtime.mutableStateOf
import com.example.mqttapp.ui.theme.MqttAppTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

import java.nio.ByteBuffer
import java.nio.channels.SocketChannel
import java.net.InetSocketAddress
import java.nio.charset.StandardCharsets
import kotlin.concurrent.thread

// gradel 8 does not allow usage of android instead androidx is used
// Mqtt Libries like Eclipse Paho(did not support androidX libraries), hivwMQ did not support//(
//(MQTT 3.1.1)
//so this code is raw coded on tcp level to establish Mqtt 

// Because Adafruit IO doesn't support the MQTT retain flag, we can use the
// get() function to ask IO to resend the last value for this feed to just
// this MQTT client after the io client is connected.

class MainActivity : ComponentActivity() {
    private val textState = mutableStateOf("Hello, Android!") // External state variable
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        CoroutineScope(Dispatchers.IO).launch {// run in a thread
            connectAndSubscribe()
            textState.value = "socket closed"
        }
        setContent {
            MqttAppTheme {
                Text(text = textState.value)
            }
        }
    }
 //-----------------------------------------------------------------------------------

    private val username = "YourUsername"
    private val aioKey = "YourAdafruitKey"
    private val topic = "$username/feeds/test"
    private val clientId = "android-kotlin-client"

    private fun encodeString(str: String): ByteArray {
        val bytes = str.toByteArray(StandardCharsets.UTF_8)
        return byteArrayOf((bytes.size shr 8).toByte(), (bytes.size and 0xFF).toByte()) + bytes
    }

    private fun encodeLength(length: Int): ByteArray {
        var value = length
        val encoded = mutableListOf<Byte>()
        do {
            var byte = (value % 128).toByte()
            value /= 128
            if (value > 0) byte = (byte.toInt() or 0x80).toByte()
            encoded.add(byte)
        } while (value > 0)
        return encoded.toByteArray()
    }

    private fun buildConnectPacket(clientId: String, username: String, password: String): ByteArray {
        val protocolName = encodeString("MQTT")
        val protocolLevel = byteArrayOf(0x04) // MQTT 3.1.1
        val connectFlags = byteArrayOf(0b1100_0000.toByte()) // username & password
        val keepAlive = byteArrayOf(0x00, 0x3C) // 60 seconds

        val payload = encodeString(clientId) + encodeString(username) + encodeString(password)
        val variableHeader = protocolName + protocolLevel + connectFlags + keepAlive
        val remainingLength = encodeLength(variableHeader.size + payload.size)

        return byteArrayOf(0x10) + remainingLength + variableHeader + payload
    }

    private fun buildPublishPacket(topic: String, message: String): ByteArray {
        val topicBytes = encodeString(topic)
        val messageBytes = message.toByteArray(StandardCharsets.UTF_8)
        val remainingLength = encodeLength(topicBytes.size + messageBytes.size)
        //first byte 0x30 means qos =0;0x32 means qos =1; 0x34 means qos =2; google for mor details
        return byteArrayOf(0x30) + remainingLength + topicBytes + messageBytes
    }
    private fun buildSubscribePacket(packetId: Int, topic: String): ByteArray {
        // Step 1: Encode the topic as a UTF-8 string with a length prefix
        val topicBytes = encodeString(topic)


        // Step 2: Fixed Header
        // 0x80 for SUBSCRIBE packet type, with reserved flag bits
        val fixedHeader = byteArrayOf(0x82.toByte())

        // Step 3: Remaining Length
        // Remaining length is calculated as the sum of the length of the variable header and payload
        val remainingLength =
            encodeLength(2 + topicBytes.size + 1) // 2 bytes for packetId, topic length, and QoS byte

        // Step 4: Packet Identifier (2-byte, big-endian)
        val packetIdBytes = byteArrayOf(
            (packetId shr 8).toByte(),  // High byte of packet ID
            (packetId and 0xFF).toByte() // Low byte of packet ID
        )

        // Step 5: Payload (Topic + QoS level)
        // Topic is encoded in the previous step, and QoS is provided by the argument
//        val qosByte = byteArrayOf(0x01)  // QoS 1
        val payload = topicBytes + byteArrayOf(0x01) // byteArrayOf(0x01) qos
        // Step 6: Combine everything
        return fixedHeader + remainingLength + packetIdBytes + payload
    }


    private fun connectAndSubscribe() {
        try {
            val socket = SocketChannel.open()

            /*The SocketChannel.open() method itself does not set a default keep-alive timeout. It just creates a SocketChannel, which internally uses a Socket object.
             Any keep-alive behavior comes from the underlying TCP socket settings. SocketChannel.open() has no built-in keep-alive timeout. it takes the default value set on the Hardware level.*/
            socket.socket().keepAlive = true;

            socket.connect(InetSocketAddress("io.adafruit.com", 1883))

            Log.d("MQTT", "🔌 Connected to Adafruit IO")

            val connectPacket = buildConnectPacket(clientId, username, aioKey)
            val status = socket.write(ByteBuffer.wrap(connectPacket))
            if (status < 0){
                Log.e("MQTT", "🔌Faild to establish communication!")
            }

            Log.d("MQTT", "📤 CONNECT sent")


            val buffer = ByteBuffer.allocate(1024)
            socket.read(buffer)
            buffer.flip()
            val connack = ByteArray(buffer.remaining())
            buffer.get(connack)
            Log.d("MQTT", "📥 CONNACK: ${connack.joinToString(" ") { "%02x".format(it) }}")

            //keep Alive ping request broker server replies 2 byte data, byte[0] is PINGRES(0xD0) also contains the 5 bit flags, byte[1] is Remaining Length (0x00)
            startPingLoop(socket)

            // Send SUBSCRIBE
            val subscribePacket = buildSubscribePacket(1,topic)
            socket.write(ByteBuffer.wrap(subscribePacket))
            Log.d("MQTT", "📤 SUBSCRIBE sent")

            // Read SUBACK
            buffer.clear()
            socket.read(buffer)
            buffer.flip()
            val suback = ByteArray(buffer.remaining())
            buffer.get(suback)
            Log.d("MQTT", "📥 SUBACK: ${suback.joinToString(" ") { "%02x".format(it) }}")
            buffer.clear()
            // Listen for incoming PUBLISH messages
            while (true) {
                buffer.clear()
                val readBytes = socket.read(buffer)
                /* // ping response from broker
                if (data.size == 2 && data[0] == 0xD0.toByte() && data[1] == 0x00.toByte()) {
                    Log.d("MQTT", "📥 Received PINGRESP from broker")
                }
                */

                if (readBytes > 0) {
                    buffer.flip()
                    val data = ByteArray(buffer.remaining())
                    buffer.get(data)
                    Log.d("MQTT", "📥 MESSAGE: ${data.joinToString(" ") { "%02x".format(it) }}")
                    parsePublish(data)
                }else if(readBytes<0){
                    Log.e("MQTT", "📥 Connection Closed By the Broker server.")
                        break
                }
//                Thread.sleep(1000)
            }
        socket.close()
        } catch (e: Exception) {
            Log.e("MQTT", "❌ Error: ${e.message}", e)
        }
    }


    private fun parsePublish(data: ByteArray) {
        if (data.isEmpty()) return
        val header = data[0].toInt() and 0xF0
        if (header == 0x30) { // PUBLISH
            val topicLength = (data[2].toInt() shl 8) or data[3].toInt()
            val topic = String(data, 4, topicLength, StandardCharsets.UTF_8)
            val payloadStart = 4 + topicLength
            val payload = String(data, payloadStart, data.size - payloadStart, StandardCharsets.UTF_8)
            Log.d("MQTT", "🟢 Topic: $topic\n📦 Message: $payload")
            textState.value = payload

        }
    }



    private fun buildPingReqPacket(): ByteArray {
        return byteArrayOf(0xC0.toByte(), 0x00)
    }

    //keep Alive ping request
    private fun startPingLoop(socket: SocketChannel) {
        thread(start = true) {
            try {
                while (true) {
                    val pingPacket = buildPingReqPacket()
                    socket.write(ByteBuffer.wrap(pingPacket))
                    Log.d("MQTT", "📤 Sent PINGREQ")
                    Thread.sleep(80_000) // Wait 80 seconds, 1min20sec, adafruit io expects a keep alive ping request before (1 min30 secs approx)
                }
            } catch (e: Exception) {
                Log.e("MQTT", "❌ PING loop stopped: ${e.message}")
            }
        }
    }
}